1. В чем разница между селектором по классу и по ID с точки зрения специфичности и возможности повторного использования?

Разница в специфичности:
- ID селектор (#id) имеет специфичность 0,1,0,0 (высокая)
- Class селектор (.class) имеет специфичность 0,0,1,0 (средняя)

Разница в повторном использовании:
- Классы можно использовать многократно на одной странице
- ID должен быть уникальным на странице (только один элемент)

2. Как работает каскад в CSS и в каком порядке применяются стили при конфликте правил?

Каскад работает по принципу приоритетов в порядке:
1. Важность (!important)
2. Специфичность селектора
3. Порядок в исходном коде (последнее правило имеет приоритет)

Порядок разрешения конфликтов:
- Стили с !important
- Встроенные стили (style attribute)
- ID селекторы
- Class селекторы, псевдоклассы, атрибуты
- Элементные селекторы, псевдоэлементы
- Унаследованные стили

3. Рассчитайте специфичность для селекторов:
   o ul li.important
   o #site-title
   o .content > .featured-post

- ul li.important: 0,0,1,2 (2 элемента + 1 класс)
- #site-title: 0,1,0,0 (1 ID)
- .content > .featured-post: 0,0,2,0 (2 класса)

4. Какие свойства в CSS наследуются по умолчанию, а какие нет? Приведите по 3 примера каждого типа.

Наследуемые свойства:
- color
- font-family
- line-height

Ненаследуемые свойства:
- background
- border
- margin

5. Как работает селектор > (дочерний селектор) и чем он отличается от селектора потомков (через пробел)?

Дочерний селектор (>) выбирает только прямых потомков:
- .parent > .child - выберет только непосредственные дочерние элементы

Селектор потомков (пробел) выбирает всех потомков любого уровня вложенности:
- .parent .child - выберет все элементы .child внутри .parent на любой глубине

6. Для чего используются псевдоклассы :hover и :nth-child()? В каких практических задачах они могут пригодиться?

:hover - применяет стили при наведении курсора:
- Кнопки, ссылки, карточки товаров

:nth-child() - выбирает элементы по их порядковому номеру:
- Полосатые таблицы
- Выделение каждых 3-х элементов в сетке
- Специфичное оформление определенных позиций в списке

7. Что делает правило !important и почему его следует использовать с осторожностью?

!important повышает приоритет свойства, делая его самым важным.

Почему использовать осторожно:
- Нарушает естественный каскад CSS
- Усложняет переопределение стилей
- Может привести к "войне !important"
- Затрудняет поддержку кода

8. Как псевдоэлементы ::before и ::after расширяют возможности CSS и какой контент они могут содержать?

::before и ::after создают псевдоэлементы внутри выбранного элемента.

Что могут содержать:
- Текст (content: "Текст")
- Декоративные элементы
- Номера, счетчики
- Пустое пространство для оформления

9. В каком порядке браузер применяет CSS-правила при одинаковой специфичности селекторов?

При одинаковой специфичности браузер применяет:
1. Последнее правило в CSS файле (по порядку в коде)
2. Более поздние импорты имеют приоритет
3. Встроенные стили в HTML имеют высший приоритет (кроме !important)

10. Как инструменты разработчика в браузере помогают анализировать и отлаживать CSS-код?

Возможности инструментов разработчика:
- Просмотр вычисленных стилей элемента
- Изменение CSS в реальном времени
- Отладка медиа-запросов
- Анализ специфичности селекторов
- Просмотр наследуемых свойств
- Эмуляция различных состояний (:hover, :focus)