1. Какое основное свойство включает CSS Grid и чем принципиально отличается от Flexbox?  
Основным свойством, включающим CSS Grid, является display: grid. В отличие от Flexbox, который предназначен для одномерных макетов (расположение элементов либо в строку, либо в столбец), CSS Grid ориентирован на двумерную компоновку — одновременное управление и строками, и столбцами. Это позволяет создавать сложные сетки с точным позиционированием элементов по горизонтали и вертикали без необходимости вложенных контейнеров.

2. В чем разница между grid-template-columns и grid-auto-columns? Когда следует использовать каждое?  
grid-template-columns задаёт явное определение столбцов сетки — их количество и размеры. Оно применяется к тем столбцам, которые вы заранее спроектировали. grid-auto-columns, напротив, определяет размеры столбцов, создаваемых автоматически, когда в сетку добавляются элементы, выходящие за пределы явно заданной структуры (например, при размещении элементов по grid-column с индексами за пределами шаблона). Используйте grid-template-columns для контроля основной структуры макета, а grid-auto-columns — для управления внештатными или динамически добавляемыми элементами.

3. Что делают функции repeat(), minmax() и auto-fit в определении grid-шаблона? Приведите примеры.  
Функция repeat() упрощает запись повторяющихся треков: например, grid-template-columns: repeat(3, 1fr) создаёт три равных столбца. minmax() задаёт диапазон размера трека: minmax(200px, 1fr) означает, что столбец будет не уже 200px и может расширяться до доли свободного пространства. auto-fit (часто используется внутри repeat) автоматически подстраивает количество треков под доступную ширину контейнера, убирая пустые треки: grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)) создаёт адаптивную сетку, где каждый столбец не уже 200px и заполняет всё доступное пространство.

4. Как работают именованные grid-области и какие преимущества они дают при создании макетов?  
Именованные grid-области создаются с помощью grid-template-areas, где каждая ячейка сетки обозначается именем, соответствующим grid-area дочернего элемента. Например, header может занимать всю верхнюю строку, sidebar — левый столбец и т.д. Преимущество — наглядность и простота проектирования сложных макетов: можно визуально «рисовать» структуру сетки текстом, а затем легко переставлять блоки, меняя только имена в шаблоне, без изменения HTML.

5. Объясните систему нумерации grid-линий и как с помощью grid-column и grid-row размещать элементы.  
Grid-линии нумеруются начиная с 1 по горизонтали (для столбцов) и вертикали (для строк). Первая линия — край сетки слева (или сверху), последняя — справа (или снизу). Свойства grid-column и grid-row указывают, между какими линиями размещать элемент. Например, grid-column: 2 / 4 означает, что элемент займёт пространство от второй до четвёртой вертикальной линии (то есть два столбца). Можно также использовать отрицательные индексы: grid-row: 1 / -1 растянет элемент от первой строки до последней.

6. Что такое grid-gap (или gap) и чем он лучше margins для создания промежутков в сетке?  
grid-gap (устаревшее название; сейчас используется просто gap в контексте grid) задаёт расстояние между строками и столбцами сетки. Он лучше margin, потому что не создаёт лишних отступов у внешних краёв контейнера, автоматически применяется только между ячейками и упрощает управление интервалами — достаточно одного значения вместо настройки margin для каждого элемента. Это делает верстку чище и предсказуемее.

7. Как свойства justify-items и align-items влияют на выравнивание grid-элементов?  
justify-items выравнивает элементы по горизонтали внутри их ячеек (вдоль строки), а align-items — по вертикали (вдоль столбца). Например, justify-items: center выровняет содержимое всех ячеек по центру по горизонтали, а align-items: start — по верхнему краю. Эти свойства применяются ко всем элементам сетки сразу; для индивидуального выравнивания используются justify-self и align-self.

8. В чем разница между auto-fill и auto-fit при создании адаптивных сеток?  
Оба значения используются внутри repeat() для автоматического определения количества треков. auto-fill создаёт столько треков, сколько поместится в контейнере, даже если они пустые. auto-fit делает то же самое, но «схлопывает» пустые треки, позволяя существующим занимать больше места. На практике auto-fit чаще даёт более компактный и эстетичный результат, особенно при использовании с minmax(), так как избегает появления невидимых пустых колонок.

9. Как создать сложные макеты с помощью grid-template-areas и какие правила именования областей существуют?  
С помощью grid-template-areas можно определить макет, описав его текстовой «картой», где каждое слово — имя области. Например:  
grid-template-areas:  
  "header header"  
  "sidebar main"  
  "footer footer";  
Каждый дочерний элемент получает grid-area с соответствующим именем. Правила именования: имена должны быть одним словом (без пробелов), состоять из букв, цифр, дефисов или подчёркиваний; каждая область должна образовывать прямоугольник; все строки шаблона должны иметь одинаковое количество ячеек. Это позволяет быстро проектировать и изменять макеты, особенно для адаптивного дизайна.

10. Какие преимущества дает CSS Grid перед другими методами верстки для создания сложных двумерных макетов?  
CSS Grid предоставляет точный контроль над размещением элементов по двум осям одновременно, что невозможно с Float или даже с Flexbox. Он устраняет необходимость в «костылях» вроде отрицательных margin, clearfix или вложенных контейнеров. Grid позволяет задавать явную сеточную структуру, размещать элементы в любом порядке независимо от HTML, легко создавать адаптивные и отзывчивые макеты с помощью minmax(), auto-fit и именованных областей. Это делает верстку более предсказуемой, читаемой и масштабируемой.