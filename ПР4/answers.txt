1. Какое основное свойство CSS включает Flexbox и что происходит с дочерними элементами после его применения?  
Основным свойством, включающим Flexbox, является display: flex. При применении этого свойства к родительскому контейнеру все его непосредственные дочерние элементы становятся flex-элементами и начинают подчиняться правилам Flexbox-модели: они выстраиваются вдоль заданной оси, могут растягиваться, сжиматься и выравниваться в зависимости от установленных свойств.

2. В чем разница между justify-content и align-items? Приведите примеры использования каждого.  
Свойство justify-content управляет выравниванием flex-элементов вдоль главной оси (main axis), а align-items — вдоль поперечной оси (cross axis). Например, при flex-direction: row главная ось горизонтальна, и justify-content: center выровняет элементы по центру по горизонтали, тогда как align-items: flex-start выровняет их по верхнему краю. Если же flex-direction: column, главная ось становится вертикальной, и justify-content будет управлять вертикальным выравниванием, а align-items — горизонтальным.

3. Что делает свойство flex-direction и какие значения может принимать? Как оно влияет на основную ось?  
Свойство flex-direction определяет направление главной оси и, соответственно, порядок размещения flex-элементов. Оно может принимать значения: row (элементы слева направо, главная ось горизонтальна), row-reverse (справа налево), column (сверху вниз, главная ось вертикальна) и column-reverse (снизу вверх). Изменение этого свойства меняет ориентацию как главной, так и поперечной оси, что влияет на поведение других свойств выравнивания.

4. Объясните значение трех свойств в сокращенной записи flex: 1. Что означают flex-grow, flex-shrink и flex-basis?  
Сокращённая запись flex: 1 эквивалентна flex: 1 1 0%. Здесь flex-grow = 1 означает, что элемент может увеличиваться, занимая доступное свободное пространство; flex-shrink = 1 — что он может сжиматься, если места недостаточно; flex-basis = 0% задаёт начальный размер элемента до распределения пространства. В совокупности это заставляет элементы равномерно заполнять контейнер.

5. Как работает свойство flex-wrap и в каких случаях его следует использовать?  
Свойство flex-wrap определяет, должны ли flex-элементы переноситься на следующую строку (или столбец), если не помещаются в одну линию. Возможные значения: nowrap (по умолчанию, все элементы в одной строке), wrap (перенос при нехватке места) и wrap-reverse (перенос в обратном порядке). Его следует использовать при создании адаптивных сеток, когда количество или ширина элементов может варьироваться, например, в галереях изображений или карточках товаров.

6. Чем отличается align-content от align-items и когда применяется каждое из этих свойств?  
align-items выравнивает отдельные элементы по поперечной оси внутри одной строки, тогда как align-content управляет выравниванием целых строк (или столбцов) относительно друг друга по поперечной оси — но только если есть несколько строк, то есть когда включён flex-wrap: wrap. align-content игнорируется при одной строке элементов. Например, align-content: space-between распределит строки с равными промежутками между ними, а align-items: center выровняет каждый элемент по центру внутри своей строки.

7. Как свойство order влияет на отображение элементов и в каких практических ситуациях оно может быть полезно?  
Свойство order определяет порядок отображения flex-элементов независимо от их порядка в HTML-разметке. По умолчанию все элементы имеют order: 0; элементы с меньшим значением отображаются раньше. Это полезно для адаптивного дизайна: например, на мобильных устройствах можно поместить кнопку «Назад» в начало строки, хотя в разметке она идёт после основного контента, просто задав ей отрицательный order.

8. Что такое "осевая линия" (main axis) и поперечная ось (cross axis) в Flexbox и как они связаны с flex-direction?  
Главная ось (main axis) — это направление, вдоль которого по умолчанию располагаются flex-элементы. Поперечная ось (cross axis) перпендикулярна главной. Направление главной оси определяется значением flex-direction: при row — горизонтальное, при column — вертикальное. Соответственно, поперечная ось меняется на противоположную ориентацию. Все свойства выравнивания (justify-content, align-items и др.) работают относительно этих осей.

9. Как создать адаптивный макет с помощью Flexbox без использования медиа-запросов? Приведите пример.  
Адаптивный макет можно создать, используя гибкие свойства flex-grow и flex-basis. Например, контейнер с display: flex и тремя дочерними элементами, каждый из которых имеет flex: 1, будет автоматически делить доступную ширину поровну, независимо от размера экрана. Если один элемент должен быть фиксированной ширины (например, боковая панель 200px), а остальные — гибкими, можно задать: sidebar { flex: 0 0 200px; }, main { flex: 1; }. Такой подход адаптируется к любому размеру контейнера без медиа-запросов.

10. Какие преимущества дает использование gap вместо margins для создания промежутков между flex-элементами?  
Свойство gap позволяет задавать равномерные промежутки между flex-элементами без необходимости управлять margin вручную, что устраняет проблемы с избыточными отступами у крайних элементов. Оно также автоматически учитывает направление flex-контейнера и работает одинаково предсказуемо как при row, так и при column. Кроме того, gap не влияет на внешние отступы контейнера, упрощая верстку и делая её более читаемой и поддерживаемой.