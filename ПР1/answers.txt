1. Какие три основные области работы с файлами в Git (рабочая папка, индекс, репозиторий) и чем они отличаются?

- Рабочая папка (Working Directory) - это текущее состояние файлов в вашей локальной директории, где вы непосредственно работаете с кодом
- Индекс (Staging Area) - промежуточная область, куда добавляются файлы перед коммитом. Здесь вы формируете "снимок" изменений для следующего коммита
- Репозиторий (Repository) - база данных Git, хранящая всю историю проекта, коммиты, ветки и метаданные

2. Что происходит при выполнении команд:
   o git add
   o git commit
   o git push

- git add - добавляет изменения из рабочей папки в индекс (staging area), подготавливая их к коммиту
- git commit - создает новый коммит из проиндексированных изменений, сохраняя их в локальный репозиторий с указанным сообщением
- git push - отправляет локальные коммиты в удаленный репозиторий, синхронизируя изменения с другими разработчиками

3. Почему важно писать информативные сообщения к коммитам а не просто "исправление" или "update"?

Информативные сообщения важны потому, что:
- Они объясняют ЗАЧЕМ были сделаны изменения, а не только ЧТО изменилось
- Помогают другим разработчикам (и вам самим в будущем) понять логику изменений
- Упрощают поиск конкретных изменений в истории
- Облегчают отладку и анализ проблем
- Делают историю проекта более читаемой и понятной

4. Чем отличается git add имя_файла от git add .? В каких случаях лучше использовать каждый вариант?

- git add имя_файла - добавляет в индекс только указанный файл. Лучше использовать когда нужно тщательно контролировать какие изменения попадут в коммит
- git add . - добавляет все измененные файлы в текущей директории и поддиректориях. Удобно когда нужно добавить все изменения сразу

Рекомендации по использованию:
- git add имя_файла - для точного контроля, когда меняете несколько файлов но хотите коммитить их отдельно
- git add . - когда все изменения в проекте связаны с одной задачей и могут быть закоммичены вместе

5. Что показывает команда git status и как меняется ее вывод на разных этапах работы?

git status показывает текущее состояние рабочей папки и индекса. Вывод меняется в зависимости от этапа:

- При наличии неотслеживаемых файлов: показывает "Untracked files"
- При изменении отслеживаемых файлов: показывает "Changes not staged for commit"
- После git add: показывает "Changes to be committed"
- После git commit: показывает "nothing to commit, working tree clean"
- При расхождении с удаленным репозиторием: показывает информацию о ahead/behind

6. Для чего нужна команда git remote add origin URL и что означает слово "origin"?

Команда git remote add origin URL добавляет удаленный репозиторий с именем "origin" и указанным URL.

Слово "origin" - это стандартное имя для основного удаленного репозитория (обычно на GitHub, GitLab и т.д.), но можно использовать любое другое имя. Это псевдоним для удобства работы с удаленным репозиторием.

7. Зачем нужен флаг -u в команде git push -u origin main при первой отправке изменений?

Флаг -u (или --set-upstream) устанавливает постоянную связь между локальной веткой и удаленной веткой. После его использования:
- Git запоминает что локальная ветка main связана с origin/main
- В дальнейшем можно использовать просто git push без указания параметров
- Команда git pull также будет автоматически работать с правильной веткой

8. Что такое ветка (branch) по умолчанию и какая у вас создалась (main или master)? Почему это важно?

Ветка по умолчанию - это основная ветка проекта. В современных версиях Git создается ветка main.

Это важно потому, что:
- Это основная ветка разработки проекта
- По умолчанию в нее делаются коммиты
- Она считается стабильной версией проекта
- При клонировании репозитория автоматически переключается на эту ветку
- С нее обычно начинается разработка новых функций

9. Как просмотреть историю коммитов и какую информацию о каждом коммите вы видите?

Для просмотра истории коммитов используется команда git log.

Информация о каждом коммите включает:
- Хеш коммита (уникальный идентификатор, например: abc123def456)
- Автора коммита (имя и email)
- Дату и время создания коммита
- Сообщение коммита

Дополнительные опции:
- git log --oneline - компактный вывод
- git log --graph - визуализация ветвления
- git log -p - показывает изменения в файлах

10. Что произойдет, если сделать изменения в файле, но не выполнить git add перед git commit?

Если сделать изменения в файле но не выполнить git add перед git commit, то:
- Эти изменения НЕ будут включены в коммит
- Git проигнорирует неподготовленные изменения
- Файлы останутся в состоянии "modified" в рабочей папке
- Потребуется отдельно добавить и закоммитить эти изменения позже
- Коммит будет создан только из тех изменений, которые были предварительно добавлены в индекс с помощью git add
